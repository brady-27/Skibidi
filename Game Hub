import pygame
import sys
import random
import numpy as np
import math
import threading
import time
import turtle
import tkinter as tk
pygame.init()
pygame.font.init()

print("1 for Ping Pong\
       2 for Etch-A-Sketch\
       3 for Connect 4\
       4 for Cookie CLicker\
       5 for Flappy Bird")

choice = int(input("Choose Your Game Here : "))

if choice == 1:
    print("Ping Pong Game Loading...")
    pygame.init

# Font that is used to render the text
    font20 = pygame.font.Font('freesansbold.ttf', 20)
    font40 = pygame.font.Font('freesansbold.ttf', 40)

# RGB values of standard colors
    BLACK = (0, 0, 0)
    WHITE = (255, 255, 255)
    GREEN = (0, 255, 0)

# Basic parameters of the screen
    WIDTH, HEIGHT = 900, 600
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Ping Pong Game")

    clock = pygame.time.Clock()
    FPS = 30

    class Striker:
        def __init__(self, posx, posy, width, height, speed, color):
            self.posx = posx
            self.posy = posy
            self.width = width
            self.height = height
            self.speed = speed
            self.color = color
            self.geekRect = pygame.Rect(posx, posy, width, height)
            self.geek = pygame.draw.rect(screen, self.color, self.geekRect)

        def display(self):
            self.geek = pygame.draw.rect(screen, self.color, self.geekRect)

        def update(self, yFac):
            self.posy += self.speed * yFac
            if self.posy <= 0:
                self.posy = 0
            elif self.posy + self.height >= HEIGHT:
                self.posy = HEIGHT - self.height
            self.geekRect = pygame.Rect(self.posx, self.posy, self.width, self.height)

        def displayScore(self, text, score, x, y, color):
            text = font20.render(text + str(score), True, color)
            textRect = text.get_rect()
            textRect.center = (x, y)
            screen.blit(text, textRect)

        def getRect(self):
            return self.geekRect

    class Ball:
        def __init__(self, posx, posy, radius, speed, color):
            self.posx = posx
            self.posy = posy
            self.radius = radius
            self.initial_speed = speed  # Store the initial speed
            self.speed = speed
            self.color = color
            self.xFac = 1
            self.yFac = -1
            self.ball = pygame.draw.circle(screen, self.color, (self.posx, self.posy), self.radius)
            self.firstTime = 1

        def display(self):
            self.ball = pygame.draw.circle(screen, self.color, (self.posx, self.posy), self.radius)

        def update(self):
            self.posx += self.speed * self.xFac
            self.posy += self.speed * self.yFac
            if self.posy <= 0 or self.posy >= HEIGHT:
                self.yFac *= -1
            if self.posx <= 0 and self.firstTime:
                self.firstTime = 0
                return 1
            elif self.posx >= WIDTH and self.firstTime:
                self.firstTime = 0
                return -1
            else:
                return 0

        def reset(self):
            self.posx = WIDTH // 2
            self.posy = HEIGHT // 2
            self.xFac *= -1
            self.speed = self.initial_speed  # Reset speed to initial speed
            self.firstTime = 1

        def hit(self):
            self.xFac *= -1
            self.speed += 1  # Increase speed after hitting paddle

        def getRect(self):
            return self.ball



    def draw_text(text, font, color, surface, x, y):
        textobj = font.render(text, True, color)
        textrect = textobj.get_rect()
        textrect.center = (x, y)
        surface.blit(textobj, textrect)

    def draw_net():
        net_width = 5
        net_height = 20
        for y in range(0, HEIGHT, net_height * 2):
            pygame.draw.rect(screen, WHITE, (WIDTH // 2 - net_width // 2, y, net_width, net_height))

    def menu():
        while True:
            screen.fill(BLACK)
            draw_text('Pong Game', font40, WHITE, screen, WIDTH // 2, HEIGHT // 4)
            draw_text('Press 1 for 2 Players', font20, WHITE, screen, WIDTH // 2, HEIGHT // 2 - 50)
            draw_text('Press 2 for Player vs AI', font20, WHITE, screen, WIDTH // 2, HEIGHT // 2)

            pygame.display.update()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_1:
                        main(False)  # 2 Players
                    if event.key == pygame.K_2:
                        difficulty_menu()  # Difficulty selection screen

    def difficulty_menu():
        while True:
            screen.fill(BLACK)
            draw_text('Select Difficulty', font40, WHITE, screen, WIDTH // 2, HEIGHT // 4)
            draw_text('Press 1 for Easy', font20, WHITE, screen, WIDTH // 2, HEIGHT // 2 - 50)
            draw_text('Press 2 for Medium', font20, WHITE, screen, WIDTH // 2, HEIGHT // 2)
            draw_text('Press 3 for Hard', font20, WHITE, screen, WIDTH // 2, HEIGHT // 2 + 50)

            pygame.display.update()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_1:
                        time_limit_menu(True, 0.6)  # Easy
                    if event.key == pygame.K_2:
                        time_limit_menu(True, 0.8)  # Medium
                    if event.key == pygame.K_3:
                        time_limit_menu(True, 1)  # Hard

    def time_limit_menu(ai_mode, difficulty):
        while True:
            screen.fill(BLACK)
            draw_text('Select Time Limit', font40, WHITE, screen, WIDTH // 2, HEIGHT // 4)
            draw_text('Press 1 for 1 Minute', font20, WHITE, screen, WIDTH // 2, HEIGHT // 2 - 50)
            draw_text('Press 2 for 3 Minutes', font20, WHITE, screen, WIDTH // 2, HEIGHT // 2)
            draw_text('Press 3 for 5 Minutes', font20, WHITE, screen, WIDTH // 2, HEIGHT // 2 + 50)

            pygame.display.update()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_1:
                        main(ai_mode, difficulty, 1)  # 1 Minute
                    if event.key == pygame.K_2:
                        main(ai_mode, difficulty, 3)  # 3 Minutes
                    if event.key == pygame.K_3:
                        main(ai_mode, difficulty, 5)  # 5 Minutes

    def main(ai_mode, difficulty=0.7, time_limit=1):
        running = True

        geek1 = Striker(20, 0, 10, 100, 10, GREEN)
        geek2 = Striker(WIDTH - 30, 0, 10, 100, 10, GREEN)
        ball = Ball(WIDTH // 2, HEIGHT // 2, 7, 7, WHITE)

        listOfGeeks = [geek1, geek2]

        geek1Score, geek2Score = 0, 0
        geek1YFac, geek2YFac = 0, 0

        start_time = time.time()
        end_time = start_time + time_limit * 60

        while running:
            screen.fill(BLACK)
            draw_net()  # Draw the net

            elapsed_time = time.time() - start_time
            remaining_time = max(0, end_time - time.time())
            draw_text(f'Time: {int(remaining_time // 60)}:{int(remaining_time % 60):02}', font20, WHITE, screen, WIDTH // 2, 20)

            if remaining_time <= 0:
                running = False
                if geek1Score > geek2Score:
                    winner = "Geek 1 Wins!"
                elif geek2Score > geek1Score:
                    winner = "Geek 2 Wins!"
                else:
                    winner = "It's a Tie!"
                screen.fill(BLACK)
                draw_text(winner, font40, WHITE, screen, WIDTH // 2, HEIGHT // 2)
                pygame.display.update()
                pygame.time.wait(3000)
                menu()

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_UP:
                        geek2YFac = -1
                    if event.key == pygame.K_DOWN:
                        geek2YFac = 1
                    if event.key == pygame.K_w:
                        geek1YFac = -1
                    if event.key == pygame.K_s:
                        geek1YFac = 1
                if event.type == pygame.KEYUP:
                    if event.key == pygame.K_UP or event.key == pygame.K_DOWN:
                        geek2YFac = 0
                    if event.key == pygame.K_w or event.key == pygame.K_s:
                        geek1YFac = 0

            for geek in listOfGeeks:
                if pygame.Rect.colliderect(ball.getRect(), geek.getRect()):
                    ball.hit()

            geek1.update(geek1YFac)

            if ai_mode:
                if random.random() < difficulty:
                    if geek2.posy + geek2.height / 2 < ball.posy:
                        geek2.update(1)
                    elif geek2.posy + geek2.height / 2 > ball.posy:
                        geek2.update(-1)
            else:
                geek2.update(geek2YFac)

            point = ball.update()

            if point == -1:
                geek1Score += 1
            elif point == 1:
                geek2Score += 1

            if point:
                ball.reset()

            geek1.display()
            geek2.display()
            ball.display()

            geek1.displayScore("Geek 1: ", geek1Score, 100, 50, WHITE)
            geek2.displayScore("Geek 2: ", geek2Score, WIDTH - 100, 50, WHITE)

            pygame.display.update()
            clock.tick(FPS)

    if __name__ == "__main__":
        menu()
        pygame.quit()
        pass







elif choice == 2:
    print("Etch-A-Sketch Game Loading...")
    screen = turtle.Screen()
    screen.title("Etch-A-Sketch Game")
    screen.bgcolor("white")

    # Create the turtle
    etch_turtle = turtle.Turtle()
    etch_turtle.speed(0)
    etch_turtle.shape("turtle")
    etch_turtle.color("black")


    # Define the functions for the movements
    def move_up():
        etch_turtle.setheading(90)
        etch_turtle.forward(3)

    def move_diag_NE():
        etch_turtle.setheading(45)
        etch_turtle.forward(3)

    def move_diag_NW():
        etch_turtle.setheading(135)
        etch_turtle.forward(3)

    def move_diag_SW():
        etch_turtle.setheading(225)
        etch_turtle.forward(3)

    def move_diag_SE():
        etch_turtle.setheading(315)
        etch_turtle.forward(3)

    def move_down():
        etch_turtle.setheading(270)
        etch_turtle.forward(3)

    def move_left():
        etch_turtle.setheading(180)
        etch_turtle.forward(3)

    def move_right():
        etch_turtle.setheading(0)
        etch_turtle.forward(3)

    def clear_drawing():
        etch_turtle.clear()

    # Keyboard bindings
    screen.listen()
    screen.onkey(move_up, "w")
    screen.onkey(move_down, "s")
    screen.onkey(move_left, "a")
    screen.onkey(move_right, "d")
    screen.onkey(move_diag_NE, "e")
    screen.onkey(move_diag_NW, "q")
    screen.onkey(move_diag_SW, "z")
    screen.onkey(move_diag_SE, "x")
    screen.onkey(clear_drawing, "c")


    # Main loop
    screen.mainloop()



    wn = turtle.Screen()   

pass


if choice==3:
    pygame.init
    print("Connect 4 Game Loading...")

    BLUE = (0, 0, 255)
    BLACK = (0, 0, 0)
    RED = (255, 0, 0)
    YELLOW = (255, 255, 0)

    ROW_COUNT = 6
    COLUMN_COUNT = 7

    def create_board():
        board = np.zeros((ROW_COUNT, COLUMN_COUNT))
        return board

    def drop_piece(board, row, col, piece):
        board[row][col] = piece

    def is_valid_location(board, col):
        return board[ROW_COUNT - 1][col] == 0

    def get_next_open_row(board, col):
        for r in range(ROW_COUNT):
            if board[r][col] == 0:
                return r

    def print_board(board):
        print(np.flip(board, 0))

    def winning_move(board, piece):
        # Check horizontal locations for win
        for c in range(COLUMN_COUNT - 3):
            for r in range(ROW_COUNT):
                if board[r][c] == piece and board[r][c + 1] == piece and board[r][c + 2] == piece and board[r][c + 3] == piece:
                    return True

        # Check vertical locations for win
        for c in range(COLUMN_COUNT):
            for r in range(ROW_COUNT - 3):
                if board[r][c] == piece and board[r + 1][c] == piece and board[r + 2][c] == piece and board[r + 3][c] == piece:
                    return True

        # Check positively sloped diagonals
        for c in range(COLUMN_COUNT - 3):
            for r in range(ROW_COUNT - 3):
                if board[r][c] == piece and board[r + 1][c + 1] == piece and board[r + 2][c + 2] == piece and board[r + 3][c + 3] == piece:
                    return True

        # Check negatively sloped diagonals
        for c in range(COLUMN_COUNT - 3):
            for r in range(3, ROW_COUNT):
                if board[r][c] == piece and board[r - 1][c + 1] == piece and board[r - 2][c + 2] == piece and board[r - 3][c + 3] == piece:
                    return True

    def draw_board(board):
        for c in range(COLUMN_COUNT):
            for r in range(ROW_COUNT):
                pygame.draw.rect(screen, BLUE (), (c * SQUARESIZE, r * SQUARESIZE + SQUARESIZE, SQUARESIZE, SQUARESIZE))
                pygame.draw.circle(screen, BLACK, (int(c * SQUARESIZE + SQUARESIZE / 2), int(r * SQUARESIZE + SQUARESIZE + SQUARESIZE / 2)), RADIUS)
        
        for c in range(COLUMN_COUNT):
            for r in range(ROW_COUNT):      
                if board[r][c] == 1:
                    pygame.draw.circle(screen, RED, (int(c * SQUARESIZE + SQUARESIZE / 2), height - int(r * SQUARESIZE + SQUARESIZE / 2)), RADIUS)
                elif board[r][c] == 2: 
                    pygame.draw.circle(screen, YELLOW, (int(c * SQUARESIZE + SQUARESIZE / 2), height - int(r * SQUARESIZE + SQUARESIZE / 2)), RADIUS)
        pygame.display.update()

    def main_menu():
        screen.fill(BLACK)
        title_font = pygame.font.SysFont("monospace", 75)
        button_font = pygame.font.SysFont("monospace", 50)
        
        title_label = title_font.render("Connect 4", 1, BLUE)
        screen.blit(title_label, (width // 4, height // 4))
        
        pvp_label = button_font.render("2 Player", 1, RED)
        screen.blit(pvp_label, (width // 4, height // 2))
        
        ai_label = button_font.render("Play vs AI", 1, YELLOW)
        screen.blit(ai_label, (width // 4, height // 2 + 100))
        
        pygame.display.update()
        
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.MOUSEBUTTONDOWN:
                    posx, posy = event.pos
                    if width // 4 <= posx <= width // 4 + 200:
                        if height // 2 <= posy <= height // 2 + 50:
                            print("2 Player mode selected")
                            return "PVP"
                        elif height // 2 + 100 <= posy <= height // 2 + 150:
                            print("Play vs AI mode selected")
                            return "AI"

    def difficulty_menu():
        screen.fill(BLACK)
        button_font = pygame.font.SysFont("monospace", 50)
        
        easy_label = button_font.render("Easy", 1, YELLOW)
        screen.blit(easy_label, (width // 4, height // 2))
        
        hard_label = button_font.render("Hard", 1, YELLOW)
        screen.blit(hard_label, (width // 4, height // 2 + 100))
        
        pygame.display.update()
        
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.MOUSEBUTTONDOWN:
                    posx, posy = event.pos
                    if width // 4 <= posx <= width // 4 + 200:
                        if height // 2 <= posy <= height // 2 + 50:
                            print("Easy difficulty selected")
                            return "EASY"
                        elif height // 2 + 100 <= posy <= height // 2 + 150:
                            print("Hard difficulty selected")
                            return "HARD"

    def ai_move(board, difficulty):
        valid_locations = [c for c in range(COLUMN_COUNT) if is_valid_location(board, c)]
        if difficulty == "EASY":
            return random.choice(valid_locations)
        elif difficulty == "HARD":
            # Add more intelligent logic for hard difficulty
            for col in valid_locations:
                row = get_next_open_row(board, col)
                temp_board = board.copy()
                drop_piece(temp_board, row, col, 2)
                if winning_move(temp_board, 2):
                    return col
            for col in valid_locations:
                row = get_next_open_row(board, col)
                temp_board = board.copy()
                drop_piece(temp_board, row, col, 1)
                if winning_move(temp_board, 1):
                    return col
            return random.choice(valid_locations)

    board = create_board()
    print_board(board)
    game_over = False
    turn = 0

    # Initialize pygame
    pygame.init()

    # Define our screen size
    SQUARESIZE = 100

    # Define width and height of board
    width = COLUMN_COUNT * SQUARESIZE
    height = (ROW_COUNT + 1) * SQUARESIZE

    size = (width, height)

    RADIUS = int(SQUARESIZE / 2 - 5)

    screen = pygame.display.set_mode(size)
    pygame.display.set_caption("Connect 4")

    # Main menu
    mode = main_menu()
    difficulty = None
    if mode == "AI":
        difficulty = difficulty_menu()

    # Calling function draw_board again
    draw_board(board)
    pygame.display.update()

    myfont = pygame.font.SysFont("monospace", 75)

    while not game_over:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.MOUSEMOTION:
                pygame.draw.rect(screen, BLACK, (0, 0, width, SQUARESIZE))
                posx = event.pos[0]
                if turn == 0:
                    pygame.draw.circle(screen, RED, (posx, int(SQUARESIZE / 2)), RADIUS)
                else:
                    pygame.draw.circle(screen, YELLOW, (posx, int(SQUARESIZE / 2)), RADIUS)
                pygame.display.update()

            if event.type == pygame.MOUSEBUTTONDOWN:
                pygame.draw.rect(screen, BLACK, (0, 0, width, SQUARESIZE))
                # Ask for Player 1 Input
                if turn == 0:
                    posx = event.pos[0]
                    col = int(math.floor(posx / SQUARESIZE))

                    if is_valid_location(board, col):
                        row = get_next_open_row(board, col)
                        drop_piece(board, row, col, 1)

                        if winning_move(board, 1):
                            label = myfont.render("Player 1 wins!!", 1, RED)
                            screen.blit(label, (40, 10))
                            game_over = True

                # Ask for Player 2 or AI Input
                else:
                    if mode == "PVP":
                        posx = event.pos[0]
                        col = int(math.floor(posx / SQUARESIZE))
                    else:  # AI mode
                        col = ai_move(board, difficulty)

                    if is_valid_location(board, col):
                        row = get_next_open_row(board, col)
                        drop_piece(board, row, col, 2)

                        if winning_move(board, 2):
                            label = myfont.render("Player 2 wins!!", 1, YELLOW)
                            screen.blit(label, (40, 10))
                            game_over = True

                print_board(board)
                draw_board(board)

                turn += 1
                turn = turn % 2

                if game_over:
                    pygame.time.wait(3000)


elif choice == 4:
    print("Cookie Clicker Game Loading...")
    import pygame
    import threading
    import time

    # Initialize Pygame
    pygame.init()

    # Set up the game window
    width, height = 800, 600
    window = pygame.display.set_mode((width, height))
    pygame.display.set_caption("Cookie Clicker")

    # Set up fonts
    font = pygame.font.Font(None, 28)
    small_font = pygame.font.Font(None, 20)

    # Initialize game variables
    cookies = 0
    cps = 0
    initial_upgrade_cost = 10
    initial_building_cost = 50
    upgrade_costs = [initial_upgrade_cost * (10 ** i) for i in range(10)]  # Quadratic increase
    building_costs = [initial_building_cost * (10 ** i) for i in range(10)]  # Quadratic increase
    upgrades = [
        "Double Cookies for Each Click",
        "Cookie Multiplier",
        "Auto-Clicker",
        "Grandma's Recipe",
        "Cookie Boost",
        "Cookie Frenzy",
        "Golden Cookie",
        "Lucky Cookie",
        "Cookie Explosion",
        "Mega Cookie Clicker"
    ]
    buildings = [
        "Cookie Factory",
        "Cookie Bakery",
        "Cookie Warehouse",
        "Cookie Mine",
        "Cookie Plantation",
        "Cookie Farm",
        "Cookie Lab",
        "Cookie Workshop",
        "Cookie Planetarium",
        "Cookie Universe"
    ]

    # Define colors
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)
    BROWN = (210, 105, 30)
    DARK_BROWN = (139, 69, 19)
    GRAY = (200, 200, 200)

    # Define a function to increment cookies based on cps
    def increment_cookies():
        global cookies
        while True:
            cookies += cps
            time.sleep(1)

    # Start the increment_cookies function in a separate thread
    threading.Thread(target=increment_cookies, daemon=True).start()

    # Main game loop
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                mouse_x, mouse_y = event.pos
                # Check if the cookie is clicked
                if 300 <= mouse_x <= 500 and 200 <= mouse_y <= 400:
                    cookies += 1
                # Check if any upgrade button is clicked
                for i in range(10):
                    if 50 <= mouse_x <= 250 and 60 + i * 55 <= mouse_y <= 110 + i * 55:
                        if cookies >= upgrade_costs[i]:
                            cookies -= upgrade_costs[i]
                            cps += 1
                # Check if any building button is clicked
                for i in range(10):
                    if 550 <= mouse_x <= 750 and 60 + i * 55 <= mouse_y <= 110 + i * 55:
                        if cookies >= building_costs[i]:
                            cookies -= building_costs[i]
                            # Implement building functionality here if needed
                            # e.g., increase some building-related stats

        # Clear the screen
        window.fill(WHITE)

        # Draw the cookie
        pygame.draw.circle(window, BROWN, (400, 300), 100)
        # Draw chocolate chips on the cookie
        for chip in [(370, 270), (430, 270), (390, 330), (410, 330), (400, 290)]:
            pygame.draw.circle(window, DARK_BROWN, chip, 10)

        # Draw the cookie count (centered)
        cookies_text = font.render(f"Cookies: {cookies}", True, BLACK)
        window.blit(cookies_text, (width // 2 - cookies_text.get_width() // 2, 10))

        # Draw the CPS (centered)
        cps_text = font.render(f"Cookies per second: {cps}", True, BLACK)
        window.blit(cps_text, (width // 2 - cps_text.get_width() // 2, 50))

        # Draw the upgrade buttons (moved up closer to the top)
        pygame.draw.rect(window, BLACK, (50, 50, 200, 600), 2)  # Box around upgrades
        for i in range(10):
            pygame.draw.rect(window, BLACK, (50, 60 + i * 55, 200, 50))
            upgrade_text = small_font.render(f"{upgrades[i]}", True, WHITE)
            window.blit(upgrade_text, (60, 65 + i * 55))
            cost_text = small_font.render(f"{upgrade_costs[i]} cookies", True, WHITE)
            window.blit(cost_text, (60, 90 + i * 55))

        # Draw the buildings
        pygame.draw.rect(window, BLACK, (550, 50, 200, 600), 2)  # Box around buildings
        for i in range(10):
            pygame.draw.rect(window, GRAY, (550, 60 + i * 55, 200, 50))
            building_text = small_font.render(f"{buildings[i]}", True, BLACK)
            window.blit(building_text, (560, 65 + i * 55))
            cost_text = small_font.render(f"{building_costs[i]} cookies", True, BLACK)
            window.blit(cost_text, (560, 90 + i * 55))

        # Update the display
        pygame.display.flip()

        # Cap the frame rate
        pygame.time.Clock().tick(60)

    # Quit Pygame
    pygame.quit()






 
          


elif choice == 5:
    print("Flappy Bird Game Loading...")
    import pygame
    import random
    pygame.init()  # Initialize Pygame

    # Screen dimensions
    WIDTH, HEIGHT = 400, 600
    win = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Flappy Bird")

    # Colors
    WHITE = (255, 255, 255)
    BLACK = (0, 0, 0)
    GREEN = (0, 255, 0)
    BLUE = (0, 0, 255)

    # Game variables
    bird_x = 50
    bird_y = HEIGHT // 2
    bird_velocity = 0
    bird_gravity = 0.5
    bird_flap_strength = -7.5
    pipe_width = 70
    pipe_gap = 200
    pipe_velocity = 5
    score = 0
    high_score = 99

    # Load images
    bird_img = pygame.Surface((30, 30))
    bird_img.fill(WHITE)

    # Font
    font = pygame.font.SysFont(None, 36)

    def draw_bird(x, y):
        win.blit(bird_img, (x, y))

    def draw_pipes(pipe):
        # Draw the upper pipe
        upper_pipe = pygame.Surface((pipe_width, pipe[1]))
        upper_pipe.fill(GREEN)
        win.blit(upper_pipe, (pipe[0], 0))
        
        # Draw the lower pipe
        lower_pipe_height = HEIGHT - (pipe[1] + pipe_gap)
        lower_pipe = pygame.Surface((pipe_width, lower_pipe_height))
        lower_pipe.fill(GREEN)
        win.blit(lower_pipe, (pipe[0], pipe[1] + pipe_gap))

    def draw_score(score):
        text = font.render(f"Score: {score}", True, WHITE)
        win.blit(text, (10, 10))

    def draw_start_screen():
        win.fill(BLACK)
        title_text = font.render("Flappy Bird", True, WHITE)
        start_text = font.render("Press SPACE to Start", True, WHITE)
        win.blit(title_text, (WIDTH // 2 - title_text.get_width() // 2, HEIGHT // 2 - title_text.get_height() // 2 - 20))
        win.blit(start_text, (WIDTH // 2 - start_text.get_width() // 2, HEIGHT // 2 + 20))
        pygame.display.flip()

    def main():
        global bird_y, bird_velocity, score

        # Start screen
        draw_start_screen()
        waiting_for_start = True

        while waiting_for_start:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    return
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_SPACE:
                        waiting_for_start = False
                        break

        # Pipe settings
        pipe_list = []
        spawn_pipe_event = pygame.USEREVENT + 1
        pygame.time.set_timer(spawn_pipe_event, 1500)

        run = True
        clock = pygame.time.Clock()

        while run:
            clock.tick(30)

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    run = False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_SPACE:
                        bird_velocity = bird_flap_strength
                if event.type == spawn_pipe_event:
                    pipe_height = random.randint(100, HEIGHT - pipe_gap - 100)
                    pipe_list.append([WIDTH, pipe_height])

            # Move bird
            bird_velocity += bird_gravity
            bird_y += bird_velocity

            # Move pipes
            for pipe in pipe_list:
                pipe[0] -= pipe_velocity

            # Remove off-screen pipes
            pipe_list = [pipe for pipe in pipe_list if pipe[0] > -pipe_width]

            # Check for collisions
            for pipe in pipe_list:
                if bird_x + 30 > pipe[0] and bird_x < pipe[0] + pipe_width:
                    if bird_y < pipe[1] or bird_y + 30 > pipe[1] + pipe_gap:
                        print("Collision detected! Game over.")
                        run = False

            # Check if bird hit the ground or ceiling
            if bird_y + 30 > HEIGHT or bird_y < 0:
                print("Bird hit the ground or ceiling! Game over.")
                run = False

            # Check if bird passed through pipes
            pipe_list_copy = pipe_list.copy()
            for pipe in pipe_list_copy:
                if pipe[0] + pipe_width == bird_x:
                    score += 1
                    if score >= high_score:
                        print("VICTORY!!!!!!")
                        run = False
                    pipe_list.remove(pipe)

            # Draw everything
            win.fill(BLACK)
            draw_bird(bird_x, bird_y)
            for pipe in pipe_list:
                draw_pipes(pipe)
            draw_score(score)

            pygame.display.flip()

        pygame.quit()

    # Run the game
    main()
